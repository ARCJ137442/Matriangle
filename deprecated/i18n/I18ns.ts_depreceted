import { int, uint } from 'matriangle-legacy/AS3Legacy'
import * as DefaultNativeI18ns from './DefaultNativeI18ns.ts_deprecated'
import * as getDefaultI18n from './getDefaultI18n.ts_deprecated'

export default class I18ns {
	//============Static Variables============//
	// I18ns
	protected static EN_US: I18ns
	protected static ZH_CN: I18ns
	protected static _translationsList: I18ns[]

	// Class Init
	protected static isInited: boolean = false

	//============Static Getter And Setter============//
	public static get translationsList(): I18ns[] {
		return I18ns._translationsList
	}

	public static get numI18ns(): int {
		return I18ns._translationsList.length
	}

	//============Static Functions============//
	public static getCapabilitiesLanguage(): string {
		// return Capabilities.language
		return 'en' // TODO: system language getter
	}
	public static getI18nByLanguage(): I18ns | null {
		if (!I18ns.isInited) I18ns.cInit()
		switch (this.getCapabilitiesLanguage()) {
			case 'en':
				return I18ns.EN_US

			case 'zh-CN':
				return I18ns.ZH_CN

			default:
				return null
		}
	}

	// 'index:text,index2:text2,index3:text3...'
	public static fromString(str: string): I18ns {
		return I18ns.fromStringArr(str.split(','))
	}

	// ['index:text','index2:text2','index3:text3'...]
	public static fromStringArr(str: string[]): I18ns {
		if (!I18ns.isInited) I18ns.cInit()

		const returnT: I18ns = new I18ns()

		if (str.length < 1 || str === null) return returnT
		let str1: string[], k: string, v: string
		for (const value of str) {
			str1 = String(value).split(':')

			k = str1[0]

			v = str1[1]

			returnT.setI18n(k, v)
		}
		return returnT
	}

	public static getI18n(translation: I18ns, key: string): string | null {
		return translation === null ? null : translation.getI18n(key)
	}

	// 'index:text','index2:text2','index3:text3','...'
	public static fromStringArr2(...str: string[]): I18ns {
		return I18ns.fromStringArr(str)
	}

	public static getIDFromI18n(translations: I18ns): int {
		return I18ns._translationsList.indexOf(translations)
	}

	public static getI18nFromID(index: int): I18ns {
		return I18ns._translationsList[index]
	}

	//====Init I18ns====//
	protected static cInit(): boolean {
		I18ns.isInited = true
		I18ns.EN_US = DefaultNativeI18ns.EN_US
		I18ns.ZH_CN = DefaultNativeI18ns.ZH_CN
		// console.log(ZH_CN.translationKeys.toString()+'\n'+ZH_CN.translationValues.toString())
		I18ns._translationsList = new Array<I18ns>(I18ns.EN_US, I18ns.ZH_CN)
		return true
	}

	//============Instance Variables============//
	protected _dictionary: object = new Object()

	protected _enabledToWrite: boolean = true

	protected _getFunction: Function

	protected _setFunction: Function

	//============Constructor & Destructor============//
	// 'index','text','index2','text2','index3','text3','...'
	public constructor(...translations) {
		if (!I18ns.isInited) I18ns.cInit()
		this._getFunction = this.defaultGet
		this._setFunction = this.defaultSet
		for (let i: uint = 0; i + 1 < translations.length; i += 2) {
			this.setI18n(translations[i], translations[i + 1])
		}
	}

	//============Instance Getter And Setter============//
	public get enableToWrite(): boolean {
		return this._enabledToWrite
	}

	public get translationKeys(): string[] {
		const rV: string[] = new Array<string>()

		for (const index in this._dictionary) {
			rV.push(String(index))
		}
		return rV
	}

	public get translationValues(): string[] {
		const rV: string[] = new Array<string>()

		for (const value of this._dictionary) {
			rV.push(String(value))
		}
		return rV
	}

	//============Instance Functions============//
	public getI18n(key: string): string {
		return this._getFunction(key)
	}

	public setI18n(key: string, value: string): void {
		this._setFunction(key, value)
	}

	protected defaultGet(key: string): string {
		const value: string = String(this._dictionary[key])
		if (value == 'undefined' || value == 'null' || value == '')
			return getDefaultI18n.getDefaultI18n(key)
		return value
	}

	protected defaultSet(key: string, value: string): void {
		if (this._enabledToWrite) this._dictionary[key] = value
	}

	public lock(): void {
		this._enabledToWrite = false
	}

	public clear(): void {
		if (this._enabledToWrite) this._dictionary = new Object()
	}

	public toString(): string {
		let rS: string = ''

		for (const index in this._dictionary) {
			rS += String(index) + ':' + String(this._dictionary[index]) + ';'
		}
		return rS
	}
}
